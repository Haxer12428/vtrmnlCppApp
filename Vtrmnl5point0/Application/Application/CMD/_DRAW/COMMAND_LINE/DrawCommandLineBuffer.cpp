#include "../../Cmd.h"

const int Cmd::COMMAND_LINE_DRAW_GET_MAXIMAL_SCROLL() {
	const int COMMAND_LINE_HEIGHT = this->COMMAND_LINE_DRAW_GET_SIZE().y;
	const int COMMAND_LINE_TOTAL_HEIGHT = (this->COMMAND_LINE_FORMATED_BUFFER.size() - 1) * this->COMMAND_LINE_BUFFER_LINE_HEIGHT;

	return COMMAND_LINE_TOTAL_HEIGHT - COMMAND_LINE_HEIGHT;
}

const int Cmd::COMMAND_LINE_DRAW_GET_SCROLL(
	const float &PROCENTAGE
) {
	const int MAXIMAL_SCROLL = this->COMMAND_LINE_DRAW_GET_MAXIMAL_SCROLL(); 
	
	if (
		MAXIMAL_SCROLL <= 0
		) return 0; 

	return float(MAXIMAL_SCROLL) * PROCENTAGE;
}

const void Cmd::COMMAND_LINE_DRAW_BUFFER_SETUP_DC(
	wxPaintDC* dc
) {
	dc->SetTextForeground(this->COMMAND_LINE_DEFAULT_COLOR);
	
	wxFont _FONT = wxFont(
		this->COMMAND_LINE_FONT_SIZE, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD
	); _FONT.SetFaceName(this->COMMAND_LINE_FONT_FACENAME);

	dc->SetFont(_FONT);
}

const wxPoint Cmd::COMMAND_LINE_DRAW_GET_STARTING_POSITION() {
	const int HORIZONTAL_DIFFERENCE = this->COMMAND_LINE_DIFFERENCE_BETWEEN_EDGES.x/2;
	const int VERTICAL_DIFFERENCE = this->COMMAND_LINE_DIFFERENCE_BETWEEN_EDGES.y; 

	const int STARTING_POSITION_X = HORIZONTAL_DIFFERENCE; 
	const int STARTING_POSITION_Y = this->MOUSE_INTERFACE_RESERVED_SPACE + VERTICAL_DIFFERENCE;

	return wxPoint(
		STARTING_POSITION_X, STARTING_POSITION_Y
	);
}

const wxPoint Cmd::COMMAND_LINE_DRAW_GET_FINAL_POSITION() {
	const int HORIZONTAL_DIFFERENCE = this->COMMAND_LINE_DIFFERENCE_BETWEEN_EDGES.x/2 + this->VERTICAL_SLIDER_RESERVED_SPACE;
	const int VERTICAL_DIFFERENCE = this->COMMAND_LINE_DIFFERENCE_BETWEEN_EDGES.y + this->MOUSE_INTERFACE_RESERVED_SPACE;

	const wxSize WINDOW_SIZE = this->GetClientSize(); 

	return wxPoint(
		WINDOW_SIZE.x - HORIZONTAL_DIFFERENCE, WINDOW_SIZE.y - VERTICAL_DIFFERENCE
	);
}

const wxSize Cmd::COMMAND_LINE_DRAW_GET_SIZE() {
	const wxPoint SIZE = this->COMMAND_LINE_DRAW_GET_FINAL_POSITION() - this->COMMAND_LINE_DRAW_GET_STARTING_POSITION();
	return wxSize(SIZE.x, SIZE.y);
}

const void Cmd::COMMAND_LINE_DRAW_BUFFER(
	wxPaintDC* dc
) {
	const wxPoint COMMAND_LINE_STARTING_POSITION = this->COMMAND_LINE_DRAW_GET_STARTING_POSITION();

	const int REGULAR_TEXT_LINE_SIZE = dc->GetTextExtent("Regular Text Line").y + this->COMMAND_LINE_DIFFERENCE_BETWEEN_LINES; 
	const int SCROLL = this->COMMAND_LINE_DRAW_GET_SCROLL(this->VERTICAL_SLIDER_HANDLE_GET_SCROLL_PROCENTAGE());
	
	this->COMMAND_LINE_BUFFER_LINE_HEIGHT = REGULAR_TEXT_LINE_SIZE;

	size_t ITERATOR_START = std::max(0, SCROLL / REGULAR_TEXT_LINE_SIZE - 1);
	size_t ITERATOR_END = std::min(int(this->COMMAND_LINE_FORMATED_BUFFER.size()), int(ITERATOR_START + (this->COMMAND_LINE_DRAW_GET_SIZE().y / REGULAR_TEXT_LINE_SIZE) + 3));

	for (
		size_t Iterator = ITERATOR_START; Iterator < ITERATOR_END; Iterator++
		) {

		const std::string BUFFER = this->COMMAND_LINE_FORMATED_BUFFER[Iterator];
		const int VERTICAL_PUSH = Iterator * REGULAR_TEXT_LINE_SIZE - SCROLL;

		const wxPoint BUFFER_POSITION = wxPoint(COMMAND_LINE_STARTING_POSITION.x, COMMAND_LINE_STARTING_POSITION.y + VERTICAL_PUSH);

		dc->DrawText(BUFFER, BUFFER_POSITION);
	}
}